#!/usr/bin/env node\n\n/**\n * Add Remaining Interface Definitions Script\n */\n\nimport { readFile, writeFile } from 'fs/promises';\n\nconst INTERFACE_FIXES = [\n  {\n    file: 'src/lib/components/organisms/data/Timeline/Timeline.types.ts',\n    interface: `export interface TimelineItem {\n  id: string;\n  title: string;\n  description?: string;\n  timestamp: Date;\n  type?: string;\n}`\n  },\n  {\n    file: 'src/lib/components/organisms/data/TreeView/TreeView.types.ts',\n    interface: `export interface TreeNode {\n  id: string;\n  label: string;\n  children?: TreeNode[];\n  expanded?: boolean;\n}`\n  }\n];\n\nasync function addRemainingInterfaces() {\n  console.log('üîß Adding remaining interface definitions...');\n  \n  for (const { file, interface: interfaceDef } of INTERFACE_FIXES) {\n    try {\n      let content = await readFile(file, 'utf-8');\n      \n      // Add interface definition after the import\n      if (content.includes(\"import type { Snippet }\")) {\n        content = content.replace(\n          \"import type { Snippet } from 'svelte';\\n\",\n          `import type { Snippet } from 'svelte';\\n\\n${interfaceDef}\\n`\n        );\n      } else {\n        content = `${interfaceDef}\\n\\n${content}`;\n      }\n      \n      await writeFile(file, content);\n      console.log(`   ‚úÖ Added interface to ${file}`);\n    } catch (error) {\n      console.warn(`   ‚ö†Ô∏è  Could not fix ${file}: ${error.message}`);\n    }\n  }\n}\n\naddRemainingInterfaces().catch(console.error);"